scalar JSON

type DeletionResultInfo {
  success: Boolean!
  Meta: MutationResultInfo!
}

type MutationResultInfo {
  transaction: Boolean!
  elapsedTime: Int!
}

type QueryResultsMetadata {
  count: Int!
}

type QueryRelationshipResultsMetadata {
  count: Int!
}

input StringArrayUpdate {
  index: Int!
  value: String!
}

input IntArrayUpdate {
  index: Int!
  value: Int!
}

input FloatArrayUpdate {
  index: Int!
  value: Float!
}

type Book {
  _id: String!
  ean: String
  isbn: String
  title: String!
  mobileImage: String
  mobileImagePreview: JSON
  smallImage: String
  smallImagePreview: JSON
  mediumImage: String
  mediumImagePreview: JSON
  userId: String
  publisher: String
  publicationDate: String
  pages: Int
  authors: [String]
  subjects: [String]
  tags: [String]
  isRead: Boolean
  dateAdded: String
  editorialReviews: [EditorialReview]
  similarItems: [String]
  similarItemsLastUpdate: Int
  timestamp: Float
  similarBooks(
    FILTER: BookSummaryFilters
    LIMIT: Int
    SKIP: Int
    PAGE: Int
    PAGE_SIZE: Int
    SORT: BookSummarySort
    SORTS: [BookSummarySort]
    PREFER_LOOKUP: Boolean
    DONT_PREFER_LOOKUP: Boolean
  ): [BookSummary!]!
  similarBooksMeta(FILTER: BookSummaryFilters): QueryRelationshipResultsMetadata
}

type BookQueryResults {
  Books: [Book!]!
  Meta: QueryResultsMetadata!
}

type BookSingleQueryResult {
  Book: Book
}

type BookMutationResult {
  Book: Book
  success: Boolean!
  Meta: MutationResultInfo!
}

type BookMutationResultMulti {
  Books: [Book]
  success: Boolean!
  Meta: MutationResultInfo!
}

type BookBulkMutationResult {
  success: Boolean!
  Meta: MutationResultInfo!
}

input BookInput {
  _id: String
  ean: String
  isbn: String
  title: String!
  mobileImage: String
  mobileImagePreview: JSON
  smallImage: String
  smallImagePreview: JSON
  mediumImage: String
  mediumImagePreview: JSON
  userId: String
  publisher: String
  publicationDate: String
  pages: Int
  authors: [String]
  subjects: [String]
  tags: [String]
  isRead: Boolean
  dateAdded: String
  editorialReviews: [EditorialReviewInput]
  similarItems: [String]
  similarItemsLastUpdate: Int
  timestamp: Float
  similarBooks: [BookSummaryInput]
}

input BookMutationInput {
  ean: String
  isbn: String
  title: String
  mobileImage: String
  mobileImagePreview: JSON
  smallImage: String
  smallImagePreview: JSON
  mediumImage: String
  mediumImagePreview: JSON
  userId: String
  publisher: String
  publicationDate: String
  pages: Int
  pages_INC: Int
  pages_DEC: Int
  authors: [String]
  authors_PUSH: String
  authors_CONCAT: [String]
  authors_UPDATE: StringArrayUpdate
  authors_UPDATES: [StringArrayUpdate]
  authors_PULL: [String]
  authors_ADDTOSET: [String]
  subjects: [String]
  subjects_PUSH: String
  subjects_CONCAT: [String]
  subjects_UPDATE: StringArrayUpdate
  subjects_UPDATES: [StringArrayUpdate]
  subjects_PULL: [String]
  subjects_ADDTOSET: [String]
  tags: [String]
  tags_PUSH: String
  tags_CONCAT: [String]
  tags_UPDATE: StringArrayUpdate
  tags_UPDATES: [StringArrayUpdate]
  tags_PULL: [String]
  tags_ADDTOSET: [String]
  isRead: Boolean
  dateAdded: String
  editorialReviews: [EditorialReviewInput]
  editorialReviews_PUSH: EditorialReviewInput
  editorialReviews_CONCAT: [EditorialReviewInput]
  editorialReviews_UPDATE: EditorialReviewArrayMutationInput
  editorialReviews_UPDATES: [EditorialReviewArrayMutationInput]
  editorialReviews_PULL: EditorialReviewFilters
  similarItems: [String]
  similarItems_PUSH: String
  similarItems_CONCAT: [String]
  similarItems_UPDATE: StringArrayUpdate
  similarItems_UPDATES: [StringArrayUpdate]
  similarItems_PULL: [String]
  similarItems_ADDTOSET: [String]
  similarItemsLastUpdate: Int
  similarItemsLastUpdate_INC: Int
  similarItemsLastUpdate_DEC: Int
  timestamp: Float
  timestamp_INC: Int
  timestamp_DEC: Int
  similarBooks_ADD: [BookSummaryInput]
}

input BookSort {
  _id: Int
  ean: Int
  isbn: Int
  title: Int
  mobileImage: Int
  smallImage: Int
  mediumImage: Int
  userId: Int
  publisher: Int
  publicationDate: Int
  pages: Int
  authors: Int
  subjects: Int
  tags: Int
  isRead: Int
  dateAdded: Int
  editorialReviews: Int
  similarItems: Int
  similarItemsLastUpdate: Int
  timestamp: Int
}

input BookFilters {
  isbn: String
  isbn_in: [String]
  title_contains: String
  userId: String
  userId_in: [String]
  publisher_contains: String
  publisher: String
  publisher_in: [String]
  pages_lt: Int
  pages_gt: Int
  pages: Int
  authors_textContains: String
  authors_in: [[String]]
  subjects_count: Int
  subjects_containsAny: [String]
  tags_containsAny: [String]
  isRead: Boolean
  isRead_ne: Boolean
  timestamp_lt: Float
  timestamp_lte: Float
  timestamp_gt: Float
  timestamp_gte: Float
  OR: [BookFilters]
}

type BookSummary {
  _id: String!
  title: String
  asin: String
  isbn: String
  ean: String
  smallImage: String
  smallImagePreview: JSON
  mediumImage: String
  mediumImagePreview: JSON
  authors: [String]
}

type BookSummaryQueryResults {
  BookSummarys: [BookSummary!]!
  Meta: QueryResultsMetadata!
}

type BookSummarySingleQueryResult {
  BookSummary: BookSummary
}

type BookSummaryMutationResult {
  BookSummary: BookSummary
  success: Boolean!
  Meta: MutationResultInfo!
}

type BookSummaryMutationResultMulti {
  BookSummarys: [BookSummary]
  success: Boolean!
  Meta: MutationResultInfo!
}

type BookSummaryBulkMutationResult {
  success: Boolean!
  Meta: MutationResultInfo!
}

input BookSummaryInput {
  _id: String
  title: String
  asin: String
  isbn: String
  ean: String
  smallImage: String
  smallImagePreview: JSON
  mediumImage: String
  mediumImagePreview: JSON
  authors: [String]
}

input BookSummaryMutationInput {
  title: String
  asin: String
  isbn: String
  ean: String
  smallImage: String
  smallImagePreview: JSON
  mediumImage: String
  mediumImagePreview: JSON
  authors: [String]
  authors_PUSH: String
  authors_CONCAT: [String]
  authors_UPDATE: StringArrayUpdate
  authors_UPDATES: [StringArrayUpdate]
  authors_PULL: [String]
  authors_ADDTOSET: [String]
}

input BookSummarySort {
  _id: Int
  title: Int
  asin: Int
  isbn: Int
  ean: Int
  smallImage: Int
  mediumImage: Int
  authors: Int
}

input BookSummaryFilters {
  title_contains: String
  title_startsWith: String
  title_endsWith: String
  title_regex: String
  title: String
  title_ne: String
  title_in: [String]
  title_nin: [String]
  asin: String
  asin_in: [String]
  isbn: String
  isbn_in: [String]
  smallImage_contains: String
  smallImage: String
  authors_count: Int
  authors_textContains: String
  authors_startsWith: String
  authors_endsWith: String
  authors_regex: String
  authors: [String]
  authors_in: [[String]]
  authors_nin: [[String]]
  authors_contains: String
  authors_containsAny: [String]
  authors_containsAll: [String]
  authors_ne: [String]
  OR: [BookSummaryFilters]
}

type BooksDeleted {
  _id: String
  userId: String
  deletedTimestamp: Float
}

type BooksDeletedQueryResults {
  BooksDeleteds: [BooksDeleted!]!
  Meta: QueryResultsMetadata!
}

type BooksDeletedSingleQueryResult {
  BooksDeleted: BooksDeleted
}

type BooksDeletedMutationResult {
  BooksDeleted: BooksDeleted
  success: Boolean!
  Meta: MutationResultInfo!
}

type BooksDeletedMutationResultMulti {
  BooksDeleteds: [BooksDeleted]
  success: Boolean!
  Meta: MutationResultInfo!
}

type BooksDeletedBulkMutationResult {
  success: Boolean!
  Meta: MutationResultInfo!
}

input BooksDeletedInput {
  _id: String
  userId: String
  deletedTimestamp: Float
}

input BooksDeletedMutationInput {
  userId: String
  deletedTimestamp: Float
  deletedTimestamp_INC: Int
  deletedTimestamp_DEC: Int
}

input BooksDeletedSort {
  _id: Int
  userId: Int
  deletedTimestamp: Int
}

input BooksDeletedFilters {
  _id: String
  _id_ne: String
  _id_in: [String]
  _id_nin: [String]
  userId_contains: String
  userId_startsWith: String
  userId_endsWith: String
  userId_regex: String
  userId: String
  userId_ne: String
  userId_in: [String]
  userId_nin: [String]
  deletedTimestamp_lt: Float
  deletedTimestamp_gt: Float
  OR: [BooksDeletedFilters]
}

type EditorialReview {
  source: String
  content: String
}

input EditorialReviewInput {
  source: String
  content: String
}

input EditorialReviewMutationInput {
  source: String
  content: String
}

input EditorialReviewArrayMutationInput {
  index: Int
  Updates: EditorialReviewMutationInput
}

input EditorialReviewSort {
  source: Int
  content: Int
}

input EditorialReviewFilters {
  source_contains: String
  source_startsWith: String
  source_endsWith: String
  source_regex: String
  source: String
  source_ne: String
  source_in: [String]
  source_nin: [String]
  content_contains: String
  content_startsWith: String
  content_endsWith: String
  content_regex: String
  content: String
  content_ne: String
  content_in: [String]
  content_nin: [String]
  OR: [EditorialReviewFilters]
}

type LabelColor {
  _id: String!
  backgroundColor: String!
  order: Int!
}

type LabelColorQueryResults {
  LabelColors: [LabelColor!]!
  Meta: QueryResultsMetadata!
}

type LabelColorSingleQueryResult {
  LabelColor: LabelColor
}

type LabelColorMutationResult {
  LabelColor: LabelColor
  success: Boolean!
  Meta: MutationResultInfo!
}

type LabelColorMutationResultMulti {
  LabelColors: [LabelColor]
  success: Boolean!
  Meta: MutationResultInfo!
}

type LabelColorBulkMutationResult {
  success: Boolean!
  Meta: MutationResultInfo!
}

input LabelColorInput {
  _id: String
  backgroundColor: String!
  order: Int!
}

input LabelColorMutationInput {
  backgroundColor: String
  order: Int
  order_INC: Int
  order_DEC: Int
}

input LabelColorSort {
  _id: Int
  backgroundColor: Int
  order: Int
}

input LabelColorFilters {
  OR: [LabelColorFilters]
}

type Subject {
  _id: String!
  name: String!
  path: String
  userId: String
  backgroundColor: String
  textColor: String
  timestamp: Float
}

type SubjectQueryResults {
  Subjects: [Subject!]!
  Meta: QueryResultsMetadata!
}

type SubjectSingleQueryResult {
  Subject: Subject
}

type SubjectMutationResult {
  Subject: Subject
  success: Boolean!
  Meta: MutationResultInfo!
}

type SubjectMutationResultMulti {
  Subjects: [Subject]
  success: Boolean!
  Meta: MutationResultInfo!
}

type SubjectBulkMutationResult {
  success: Boolean!
  Meta: MutationResultInfo!
}

input SubjectInput {
  _id: String
  name: String!
  path: String
  userId: String
  backgroundColor: String
  textColor: String
  timestamp: Float
}

input SubjectMutationInput {
  name: String
  path: String
  userId: String
  backgroundColor: String
  textColor: String
  timestamp: Float
  timestamp_INC: Int
  timestamp_DEC: Int
}

input SubjectSort {
  _id: Int
  name: Int
  path: Int
  userId: Int
  backgroundColor: Int
  textColor: Int
  timestamp: Int
}

input SubjectFilters {
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_regex: String
  name: String
  name_ne: String
  name_in: [String]
  name_nin: [String]
  path_contains: String
  path_startsWith: String
  path: String
  userId: String
  userId_in: [String]
  timestamp_lt: Float
  timestamp_gt: Float
  OR: [SubjectFilters]
}

type SubjectsDeleted {
  _id: String
  userId: String
  deletedTimestamp: Float
}

type SubjectsDeletedQueryResults {
  SubjectsDeleteds: [SubjectsDeleted!]!
  Meta: QueryResultsMetadata!
}

type SubjectsDeletedSingleQueryResult {
  SubjectsDeleted: SubjectsDeleted
}

type SubjectsDeletedMutationResult {
  SubjectsDeleted: SubjectsDeleted
  success: Boolean!
  Meta: MutationResultInfo!
}

type SubjectsDeletedMutationResultMulti {
  SubjectsDeleteds: [SubjectsDeleted]
  success: Boolean!
  Meta: MutationResultInfo!
}

type SubjectsDeletedBulkMutationResult {
  success: Boolean!
  Meta: MutationResultInfo!
}

input SubjectsDeletedInput {
  _id: String
  userId: String
  deletedTimestamp: Float
}

input SubjectsDeletedMutationInput {
  userId: String
  deletedTimestamp: Float
  deletedTimestamp_INC: Int
  deletedTimestamp_DEC: Int
}

input SubjectsDeletedSort {
  _id: Int
  userId: Int
  deletedTimestamp: Int
}

input SubjectsDeletedFilters {
  _id: String
  _id_ne: String
  _id_in: [String]
  _id_nin: [String]
  userId_contains: String
  userId_startsWith: String
  userId_endsWith: String
  userId_regex: String
  userId: String
  userId_ne: String
  userId_in: [String]
  userId_nin: [String]
  deletedTimestamp_lt: Float
  deletedTimestamp_gt: Float
  OR: [SubjectsDeletedFilters]
}

type Tag {
  _id: String!
  name: String!
  path: String
  userId: String
  backgroundColor: String!
  textColor: String!
  timestamp: Float
}

type TagQueryResults {
  Tags: [Tag!]!
  Meta: QueryResultsMetadata!
}

type TagSingleQueryResult {
  Tag: Tag
}

type TagMutationResult {
  Tag: Tag
  success: Boolean!
  Meta: MutationResultInfo!
}

type TagMutationResultMulti {
  Tags: [Tag]
  success: Boolean!
  Meta: MutationResultInfo!
}

type TagBulkMutationResult {
  success: Boolean!
  Meta: MutationResultInfo!
}

input TagInput {
  _id: String
  name: String!
  path: String
  userId: String
  backgroundColor: String!
  textColor: String!
  timestamp: Float
}

input TagMutationInput {
  name: String
  path: String
  userId: String
  backgroundColor: String
  textColor: String
  timestamp: Float
  timestamp_INC: Int
  timestamp_DEC: Int
}

input TagSort {
  _id: Int
  name: Int
  path: Int
  userId: Int
  backgroundColor: Int
  textColor: Int
  timestamp: Int
}

input TagFilters {
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_regex: String
  name: String
  name_ne: String
  name_in: [String]
  name_nin: [String]
  path_contains: String
  path_startsWith: String
  path: String
  userId: String
  userId_in: [String]
  timestamp_lt: Float
  timestamp_gt: Float
  OR: [TagFilters]
}

type TagsDeleted {
  _id: String
  userId: String
  deletedTimestamp: Float
}

type TagsDeletedQueryResults {
  TagsDeleteds: [TagsDeleted!]!
  Meta: QueryResultsMetadata!
}

type TagsDeletedSingleQueryResult {
  TagsDeleted: TagsDeleted
}

type TagsDeletedMutationResult {
  TagsDeleted: TagsDeleted
  success: Boolean!
  Meta: MutationResultInfo!
}

type TagsDeletedMutationResultMulti {
  TagsDeleteds: [TagsDeleted]
  success: Boolean!
  Meta: MutationResultInfo!
}

type TagsDeletedBulkMutationResult {
  success: Boolean!
  Meta: MutationResultInfo!
}

input TagsDeletedInput {
  _id: String
  userId: String
  deletedTimestamp: Float
}

input TagsDeletedMutationInput {
  userId: String
  deletedTimestamp: Float
  deletedTimestamp_INC: Int
  deletedTimestamp_DEC: Int
}

input TagsDeletedSort {
  _id: Int
  userId: Int
  deletedTimestamp: Int
}

input TagsDeletedFilters {
  _id: String
  _id_ne: String
  _id_in: [String]
  _id_nin: [String]
  userId_contains: String
  userId_startsWith: String
  userId_endsWith: String
  userId_regex: String
  userId: String
  userId_ne: String
  userId_in: [String]
  userId_nin: [String]
  deletedTimestamp_lt: Float
  deletedTimestamp_gt: Float
  OR: [TagsDeletedFilters]
}

type Query {
  allBooks(
    isbn: String
    isbn_in: [String]
    title_contains: String
    userId: String
    userId_in: [String]
    publisher_contains: String
    publisher: String
    publisher_in: [String]
    pages_lt: Int
    pages_gt: Int
    pages: Int
    authors_textContains: String
    authors_in: [[String]]
    subjects_count: Int
    subjects_containsAny: [String]
    tags_containsAny: [String]
    isRead: Boolean
    isRead_ne: Boolean
    timestamp_lt: Float
    timestamp_lte: Float
    timestamp_gt: Float
    timestamp_gte: Float
    OR: [BookFilters]
    SORT: BookSort
    SORTS: [BookSort]
    LIMIT: Int
    SKIP: Int
    PAGE: Int
    PAGE_SIZE: Int
    searchChildSubjects: Boolean
    publicUserId: String
    ver: String
    cache: Int
  ): BookQueryResults!

  getBook(
    _id: String
    searchChildSubjects: Boolean
    publicUserId: String
    ver: String
    cache: Int
  ): BookSingleQueryResult!

  allBookSummarys(
    title_contains: String
    title_startsWith: String
    title_endsWith: String
    title_regex: String
    title: String
    title_ne: String
    title_in: [String]
    title_nin: [String]
    asin: String
    asin_in: [String]
    isbn: String
    isbn_in: [String]
    smallImage_contains: String
    smallImage: String
    authors_count: Int
    authors_textContains: String
    authors_startsWith: String
    authors_endsWith: String
    authors_regex: String
    authors: [String]
    authors_in: [[String]]
    authors_nin: [[String]]
    authors_contains: String
    authors_containsAny: [String]
    authors_containsAll: [String]
    authors_ne: [String]
    OR: [BookSummaryFilters]
    SORT: BookSummarySort
    SORTS: [BookSummarySort]
    LIMIT: Int
    SKIP: Int
    PAGE: Int
    PAGE_SIZE: Int
  ): BookSummaryQueryResults!

  getBookSummary(_id: String): BookSummarySingleQueryResult!

  allBooksDeleteds(
    _id: String
    _id_ne: String
    _id_in: [String]
    _id_nin: [String]
    userId_contains: String
    userId_startsWith: String
    userId_endsWith: String
    userId_regex: String
    userId: String
    userId_ne: String
    userId_in: [String]
    userId_nin: [String]
    deletedTimestamp_lt: Float
    deletedTimestamp_gt: Float
    OR: [BooksDeletedFilters]
    SORT: BooksDeletedSort
    SORTS: [BooksDeletedSort]
    LIMIT: Int
    SKIP: Int
    PAGE: Int
    PAGE_SIZE: Int
  ): BooksDeletedQueryResults!

  getBooksDeleted(_id: String): BooksDeletedSingleQueryResult!

  allLabelColors(
    OR: [LabelColorFilters]
    SORT: LabelColorSort
    SORTS: [LabelColorSort]
    LIMIT: Int
    SKIP: Int
    PAGE: Int
    PAGE_SIZE: Int
    ver: String
    cache: Int
  ): LabelColorQueryResults!

  allSubjects(
    name_contains: String
    name_startsWith: String
    name_endsWith: String
    name_regex: String
    name: String
    name_ne: String
    name_in: [String]
    name_nin: [String]
    path_contains: String
    path_startsWith: String
    path: String
    userId: String
    userId_in: [String]
    timestamp_lt: Float
    timestamp_gt: Float
    OR: [SubjectFilters]
    SORT: SubjectSort
    SORTS: [SubjectSort]
    LIMIT: Int
    SKIP: Int
    PAGE: Int
    PAGE_SIZE: Int
    publicUserId: String
    ver: String
    cache: Int
  ): SubjectQueryResults!

  getSubject(
    _id: String
    publicUserId: String
    ver: String
    cache: Int
  ): SubjectSingleQueryResult!

  allSubjectsDeleteds(
    _id: String
    _id_ne: String
    _id_in: [String]
    _id_nin: [String]
    userId_contains: String
    userId_startsWith: String
    userId_endsWith: String
    userId_regex: String
    userId: String
    userId_ne: String
    userId_in: [String]
    userId_nin: [String]
    deletedTimestamp_lt: Float
    deletedTimestamp_gt: Float
    OR: [SubjectsDeletedFilters]
    SORT: SubjectsDeletedSort
    SORTS: [SubjectsDeletedSort]
    LIMIT: Int
    SKIP: Int
    PAGE: Int
    PAGE_SIZE: Int
  ): SubjectsDeletedQueryResults!

  getSubjectsDeleted(_id: String): SubjectsDeletedSingleQueryResult!

  allTags(
    name_contains: String
    name_startsWith: String
    name_endsWith: String
    name_regex: String
    name: String
    name_ne: String
    name_in: [String]
    name_nin: [String]
    path_contains: String
    path_startsWith: String
    path: String
    userId: String
    userId_in: [String]
    timestamp_lt: Float
    timestamp_gt: Float
    OR: [TagFilters]
    SORT: TagSort
    SORTS: [TagSort]
    LIMIT: Int
    SKIP: Int
    PAGE: Int
    PAGE_SIZE: Int
    publicUserId: String
    ver: String
    cache: Int
  ): TagQueryResults!

  getTag(
    _id: String
    publicUserId: String
    ver: String
    cache: Int
  ): TagSingleQueryResult!

  allTagsDeleteds(
    _id: String
    _id_ne: String
    _id_in: [String]
    _id_nin: [String]
    userId_contains: String
    userId_startsWith: String
    userId_endsWith: String
    userId_regex: String
    userId: String
    userId_ne: String
    userId_in: [String]
    userId_nin: [String]
    deletedTimestamp_lt: Float
    deletedTimestamp_gt: Float
    OR: [TagsDeletedFilters]
    SORT: TagsDeletedSort
    SORTS: [TagsDeletedSort]
    LIMIT: Int
    SKIP: Int
    PAGE: Int
    PAGE_SIZE: Int
  ): TagsDeletedQueryResults!

  getTagsDeleted(_id: String): TagsDeletedSingleQueryResult!
}

type Mutation {
  createBook(Book: BookInput): BookMutationResult

  updateBook(_id: String, Updates: BookMutationInput): BookMutationResult

  updateBooks(
    _ids: [String]
    Updates: BookMutationInput
  ): BookMutationResultMulti

  updateBooksBulk(
    Match: BookFilters
    Updates: BookMutationInput
  ): BookBulkMutationResult

  deleteBook(_id: String): DeletionResultInfo

  updateBookSummary(
    _id: String
    Updates: BookSummaryMutationInput
  ): BookSummaryMutationResult

  createSubject(Subject: SubjectInput): SubjectMutationResult

  updateSubject(
    _id: String
    name: String
    backgroundColor: String
    textColor: String
    parentId: String
  ): SubjectMutationResultMulti

  deleteSubject(_id: String): [String]

  createTag(Tag: TagInput): TagMutationResult

  updateTag(_id: String, Updates: TagMutationInput): TagMutationResult

  updateTags(_ids: [String], Updates: TagMutationInput): TagMutationResultMulti

  updateTagsBulk(
    Match: TagFilters
    Updates: TagMutationInput
  ): TagBulkMutationResult

  deleteTag(_id: String): DeletionResultInfo
}

type User {
  email: String
  userId: String
  isPublic: Boolean
  publicName: String
  publicBooksHeader: String
}

type PublicUser {
  email: String
  isPublic: Boolean
  publicName: String
  publicBooksHeader: String
}

type UserSingleQueryResult {
  User: User
}

type PublicUserSingleQueryResult {
  PublicUser: User
}

extend type Query {
  getUser: UserSingleQueryResult
  getPublicUser(userId: String): PublicUserSingleQueryResult
}

input UserUpdates {
  isPublic: Boolean
  publicBooksHeader: String
  publicName: String
}

extend type Mutation {
  updateUser(Updates: UserUpdates): UserSingleQueryResult
}

type ScanResult {
  success: Boolean
  isbn: String
  title: String
  smallImage: String
}

type DynamoKey {
  pk: String
  sk: String
}

input DynamoKeyInput {
  pk: String
  sk: String
}

type ScanResults {
  ScanResults: [ScanResult]
  LastEvaluatedKey: DynamoKey
}

extend type Query {
  recentScanResults(exclusiveStartKey: DynamoKeyInput): ScanResults
}
