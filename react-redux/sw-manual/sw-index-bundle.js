(function(){"use strict";function a(a){var b;switch(a.arrayFormat){case"index":return function(a,c,d){return b=/\[(\d*)\]$/.exec(a),a=a.replace(/\[\d*\]$/,""),b?void(void 0===d[a]&&(d[a]={}),d[a][b[1]]=c):void(d[a]=c)};case"bracket":return function(a,c,d){return b=/(\[\])$/.exec(a),a=a.replace(/\[\]$/,""),b&&void 0!==d[a]?void(d[a]=[].concat(d[a],c)):void(d[a]=c)};default:return function(a,b,c){return void 0===c[a]?void(c[a]=b):void(c[a]=[].concat(c[a],b))};}}function b(a){if(Array.isArray(a))return a.sort();return"object"==typeof a?b(Object.keys(a)).sort(function(c,a){return+c-+a}).map(function(b){return a[b]}):a}function c(c,d){d=Object.assign({arrayFormat:"none"},d);var e=a(d),f=Object.create(null);// Create an object with no prototype
// https://github.com/sindresorhus/query-string/issues/47
return"string"==typeof c?(c=c.trim().replace(/^(\?|#|&)/,""),!c)?f:(c.split("&").forEach(function(a){var b=a.replace(/\+/g," ").split("="),c=b.shift(),d=0<b.length?b.join("="):void 0;// Firefox (pre 40) decodes `%3D` to `=`
// https://github.com/sindresorhus/query-string/pull/37
d=void 0===d?null:decodeURIComponent(d),e(decodeURIComponent(c),d,f)}),Object.keys(f).sort().reduce(function(a,c){var d=f[c];return a[c]=!d||"object"!=typeof d||Array.isArray(d)?d:b(d),a},Object.create(null))):f}function d(){return new Response(JSON.stringify({data:{}}),{ok:!0,status:200})}function e(a){let b=indexedDB.open("books",1);b.onsuccess=()=>{let c=b.result;if(c.objectStoreNames.contains("books")){let b=c.transaction("books","readwrite"),d=b.objectStore("books");d.get(a._id).onsuccess=({target:{result:b}})=>{["title","authors","isbn"].forEach(c=>b[c]=a[c]),d.put(b)}}}}function f(){let a=indexedDB.open("books",1);a.onupgradeneeded=b=>{console.log("Setting up DB");let c=a.result;if(!c.objectStoreNames.contains("books")){let a=c.createObjectStore("books",{keyPath:"_id"});a.createIndex("imgSync","imgSync",{unique:!1})}c.objectStoreNames.contains("syncInfo")||(c.createObjectStore("syncInfo",{keyPath:"id"}),b.target.transaction.objectStore("syncInfo").add({id:1,lastImgSync:null,lastImgSyncStarted:null,lastLoadStarted:+new Date,lastLoad:null})),b.target.transaction.oncomplete=h}}function g(a){async function b(){if(g.length)for(let b of g)try{let c=await k(b);if(c){let c=a.transaction("books","readwrite"),d=c.objectStore("books");await new Promise(a=>{let c=d.get(b._id);c.onsuccess=({target:{result:b}})=>{b.imgSync=1,d.put(b),a()},c.onerror=()=>a()})}}catch(a){console.log("ERROR",a)}finally{}}console.log("SYNCING IMAGES");let c=a.transaction("books"),d=c.objectStore("books"),e=d.index("imgSync"),f=e.openCursor(0),g=[];f.onsuccess=a=>{let c=a.target.result;if(!c)return b();let d=c.value;g.push({_id:d._id,smallImage:d.smallImage}),c.continue()}}function h(a=1){let b=indexedDB.open("books",1);// Set up the database schema
b.onsuccess=()=>{let a=b.result;j(a,1)}}function j(a,b){async function c(a){await g(a);let b=a.transaction("syncInfo","readwrite"),c=b.objectStore("syncInfo"),d=c.get(1);d.onsuccess=({target:{result:a}})=>{Object.assign(a,{lastLoad:+new Date,lastLoadStarted:null}),c.put(a)}}let d=50;l("/book/offlineSync",{page:b,pageSize:50}).then(a=>a.json()).then(e=>{function f(){if(k<d){let b=g[k++];if(!b)return void c(a);let d=a.transaction("books","readwrite"),e=d.objectStore("books");e.add(Object.assign(b,{imgSync:0})).onsuccess=f}else g.length>d?j(a,b+1):c(a)}if(!e.books)return;let g=e.books,h=g.count,k=0;f()})}async function k(a){let b=a.smallImage;if(b){let a=await caches.match(b);if(!a){if(/https:\/\/s3.amazonaws.com\/my-library-cover-uploads/.test(b)){let a=await caches.open("local-images1"),c=await fetch(b,{mode:"no-cors"});return await a.put(b,c),!0}if(/https:\/\/images-na\.ssl-images-amazon\.com/.test(b)){let a=await caches.open("amazon-images1"),c=await fetch(b,{mode:"no-cors"});return await a.put(b,c),!0}if(/https:\/\/ecx\.images-amazon\.com/.test(b)){let a=await caches.open("amazon-images1"),c=await fetch(b,{mode:"no-cors"});return await a.put(b,c),!0}}}}self.addEventListener("message",a=>{"sw-update-accepted"==a.data&&self.skipWaiting().then(()=>{self.clients.claim().then(()=>{self.clients.matchAll().then(a=>{a.forEach(a=>a.postMessage("sw-updated"))})})})});workbox.routing.registerRoute(/graphql$/,({url:a,event:b})=>{//turning this off for now, until I can wrap some other things up
return fetch(b.request)},"POST"),workbox.routing.registerRoute(/graphql/,({url:a,event:b})=>{b.respondWith(fetch(b.request).catch(()=>{const{query:e,variables:f}=c(a.search);if(console.log("searching for ",e),console.log("book search query ",3),3==e)return console.log("FOUND IT"),d(f,a=>b.respondWith(a))}))},"GET"),self.addEventListener("push",()=>{console.log("Push notification received!!!"),self.registration.showNotification("Push notification received!")}),self.addEventListener("message",a=>{a.data&&"do-sync"==a.data.command&&f()}),self.addEventListener("activate",f);const l=(a,b)=>fetch(a,{method:"post",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(b)})})();
